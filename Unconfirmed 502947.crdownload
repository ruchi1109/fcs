{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dd63605e-2dfc-47f2-8986-0ee123d8db1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Apple\n",
      "ApplePie\n",
      "Peach\n",
      "PeachPie\n",
      "Banana\n",
      "BananaPie\n"
     ]
    }
   ],
   "source": [
    "fruits = [\"Apple\",\"Peach\",\"Banana\"]\n",
    "for fruit in fruits:\n",
    "    print(fruit)\n",
    "    print(fruit + \"Pie\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b041e64e-81a9-4f02-b47c-0c16624537e2",
   "metadata": {},
   "source": [
    "You are going to write a program that calculates the average student height from a List of heights.\n",
    "\n",
    "e.g. student_heights = [180, 124, 165, 173, 189, 169, 146]\n",
    "\n",
    "The average height can be calculated by adding all the heights together and dividing by the total number of heights.\n",
    "\n",
    "e.g.\n",
    "\n",
    "180 + 124 + 165 + 173 + 189 + 169 + 146 = 1146\n",
    "\n",
    "There are a total of 7 heights in student_heights\n",
    "\n",
    "1146 รท 7 = 163.71428571428572\n",
    "\n",
    "Average height rounded to the nearest whole number = 164\n",
    "\n",
    "Important You should not use the sum() or len() functions in your answer. You should try to replicate their functionality using what you have learnt about for loops.\n",
    "\n",
    "Example Input 1\n",
    "156 178 165 171 187\n",
    "In this case, student_heights would be a list that looks like: [156, 178, 165, 171, 187]\n",
    "\n",
    "Example Output 1\n",
    "total height = 857\n",
    "number of students = 5\n",
    "average height = 171"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2d5148f8-7720-42ac-9a09-20b1ac1e22a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the total height = 1146\n",
      "the number of students = 7\n",
      "the average height = 164\n"
     ]
    }
   ],
   "source": [
    "student_heights = [180, 124, 165, 173, 189, 169, 146]\n",
    "total_height = 0\n",
    "for height in student_heights:\n",
    "    total_height += height\n",
    "print(f\"the total height = {total_height}\")\n",
    "\n",
    "number_of_students = 0\n",
    "for students in student_heights:\n",
    "    number_of_students += 1\n",
    "print(f\"the number of students = {number_of_students}\")\n",
    "\n",
    "average_height = round(total_height/ number_of_students)\n",
    "print(f\"the average height = {average_height}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e913ccb2-b57c-4626-98be-83b9fb177a6a",
   "metadata": {},
   "source": [
    "You are going to write a program that calculates the highest score from a List of scores.\n",
    "\n",
    "e.g. student_scores = [78, 65, 89, 86, 55, 91, 64, 89]\n",
    "\n",
    "Important you are not allowed to use the max or min functions. The output words must match the example. i.e\n",
    "\n",
    "The highest score in the class is: x\n",
    "Example Input\n",
    "78 65 89 86 55 91 64 89\n",
    "In this case, student_scores would be a list that looks like: [78, 65, 89, 86, 55, 91, 64, 89]\n",
    "\n",
    "Example Output\n",
    "The highest score in the class is: 91"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "99fd4950-5753-4b39-8d95-ccf46bd95662",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 78, 65, 89, 86, 55, 91, 64, 89\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'student_score' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_317/1100652818.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mstudent_scores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mn\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstudent_score\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mstudent_scores\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstudent_scores\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mhighest_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'student_score' is not defined"
     ]
    }
   ],
   "source": [
    "student_scores = input()\n",
    "for n in range(0, len(student_score)):\n",
    "    student_scores[n] = int(student_scores[n])\n",
    "    \n",
    "highest_score = 0\n",
    "for scores in student_scores:\n",
    "    if score > highest_score:\n",
    "        highest_score = score\n",
    "        \n",
    "print(f\"the highest score is {highest_score}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e68a353c-0002-4610-8b59-0749693e0b03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5050\n"
     ]
    }
   ],
   "source": [
    "total = 0\n",
    "for number in range(1,101):\n",
    "    total += number\n",
    "print(total)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb208359-df18-483d-adde-2f17cba16564",
   "metadata": {},
   "source": [
    "You are going to write a program that calculates the sum of all the even numbers from 1 to X. If X is 100 then the first even number would be 2 and the last one is 100:\n",
    "\n",
    "i.e. 2 + 4 + 6 + 8 +10 ... + 98 + 100\n",
    "\n",
    "Important, there should only be 1 print statement in your console output. It should just print the final total and not every step of the calculation.\n",
    "\n",
    "Also, we will constrain the inputs to only take numbers from 0 to a max of 1000.\n",
    "\n",
    "Example Input 1\n",
    "10\n",
    "Example Output 1\n",
    "30\n",
    "Example Input 2\n",
    "52\n",
    "Example Output 2\n",
    "702\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "df93ad57-d240-4331-aed4-2653503d7dc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the sum of even numbers from 1 to 1000 is 250500\n"
     ]
    }
   ],
   "source": [
    "even_sum = 0\n",
    "for number in range(1,1001):\n",
    "    if number % 2 == 0:\n",
    "        even_sum += number\n",
    "print(f\"the sum of even numbers from 1 to 1000 is {even_sum}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84c87fa1-209e-4d11-aa95-0b14149138e7",
   "metadata": {},
   "source": [
    "You are going to write a program that automatically prints the solution to the FizzBuzz game. These are the rules of the FizzBuzz game:\n",
    "\n",
    "Your program should print each number from 1 to 100 in turn and include number 100.\n",
    "\n",
    "When the number is divisible by 3 then instead of printing the number it should print \"Fizz\".\n",
    "\n",
    "When the number is divisible by 5, then instead of printing the number it should print \"Buzz\".`\n",
    "\n",
    "And if the number is divisible by both 3 and 5 e.g. 15 then instead of the number it should print \"FizzBuzz\"\n",
    "\n",
    "e.g. it might start off like this:\n",
    "\n",
    "1\n",
    "2\n",
    "Fizz\n",
    "4\n",
    "Buzz\n",
    "Fizz\n",
    "7\n",
    "8\n",
    "Fizz\n",
    "Buzz\n",
    "11\n",
    "Fizz\n",
    "13\n",
    "14\n",
    "FizzBuzz\n",
    "...etc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bf1daf1c-bd04-410b-a5ef-3c907393b044",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "Fizz\n",
      "4\n",
      "Buzz\n",
      "Fizz\n",
      "7\n",
      "8\n",
      "Fizz\n",
      "Buzz\n",
      "11\n",
      "Fizz\n",
      "13\n",
      "14\n",
      "FizzBuzz\n",
      "16\n",
      "17\n",
      "Fizz\n",
      "19\n",
      "Buzz\n",
      "Fizz\n",
      "22\n",
      "23\n",
      "Fizz\n",
      "Buzz\n",
      "26\n",
      "Fizz\n",
      "28\n",
      "29\n",
      "FizzBuzz\n",
      "31\n",
      "32\n",
      "Fizz\n",
      "34\n",
      "Buzz\n",
      "Fizz\n",
      "37\n",
      "38\n",
      "Fizz\n",
      "Buzz\n",
      "41\n",
      "Fizz\n",
      "43\n",
      "44\n",
      "FizzBuzz\n",
      "46\n",
      "47\n",
      "Fizz\n",
      "49\n",
      "Buzz\n",
      "Fizz\n",
      "52\n",
      "53\n",
      "Fizz\n",
      "Buzz\n",
      "56\n",
      "Fizz\n",
      "58\n",
      "59\n",
      "FizzBuzz\n",
      "61\n",
      "62\n",
      "Fizz\n",
      "64\n",
      "Buzz\n",
      "Fizz\n",
      "67\n",
      "68\n",
      "Fizz\n",
      "Buzz\n",
      "71\n",
      "Fizz\n",
      "73\n",
      "74\n",
      "FizzBuzz\n",
      "76\n",
      "77\n",
      "Fizz\n",
      "79\n",
      "Buzz\n",
      "Fizz\n",
      "82\n",
      "83\n",
      "Fizz\n",
      "Buzz\n",
      "86\n",
      "Fizz\n",
      "88\n",
      "89\n",
      "FizzBuzz\n",
      "91\n",
      "92\n",
      "Fizz\n",
      "94\n",
      "Buzz\n",
      "Fizz\n",
      "97\n",
      "98\n",
      "Fizz\n",
      "Buzz\n"
     ]
    }
   ],
   "source": [
    "for number in range(1,101):\n",
    "    if number % 3 == 0 and number % 5 == 0:\n",
    "        print(\"FizzBuzz\")\n",
    "    elif number % 3 == 0:\n",
    "        print(\"Fizz\")\n",
    "    elif number % 5 == 0:\n",
    "        print(\"Buzz\")\n",
    "    else:\n",
    "        print(number)\n",
    "              \n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c0453f6-5d0a-4661-9137-2f2c07a7c2a0",
   "metadata": {},
   "source": [
    "Password Generator\n",
    "Instructions\n",
    "The program will ask:\n",
    "\n",
    "How many letters would you like in your password?\n",
    "How many symbols would you like?\n",
    "How many numbers would you like?\n",
    "The objective is to take the inputs from the user to these questions and then generate a random password. Use your knowledge about Python lists and loops to complete the challenge.\n",
    "\n",
    "Easy Version (Step 1)\n",
    "Generate the password in sequence. If the user wants\n",
    "\n",
    "4 letters\n",
    "2 symbols and\n",
    "3 numbers\n",
    "then the password might look like this:\n",
    "\n",
    "fgdx$*924\n",
    "You can see that all the letters are together. All the symbols are together and all the numbers follow each other as well. Try to solve this problem first.\n",
    "\n",
    "Hard Version (Step 2)\n",
    "When you've completed the easy version, you're ready to tackle the hard version. In the advanced version of this project the final password does not follow a pattern. So the example above might look like this:\n",
    "\n",
    "x$d24g*f9\n",
    "And every time you generate a password, the positions of the symbols, numbers, and letters are different."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "93669942-443c-48b1-8613-2e55d43d897a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to the PyPassword Generator!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "How many letters you want in your password 4\n",
      "How many numbers you want in your password 2\n",
      "How many symbols you want in your password 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " TQbP66+\n",
      " TQbP66+&\n"
     ]
    }
   ],
   "source": [
    "#Easy Vesrion\n",
    "import random\n",
    "letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n",
    "numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n",
    "symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']\n",
    "\n",
    "print(\"Welcome to the PyPassword Generator!\")\n",
    "\n",
    "nr_letters = int(input(\"How many letters you want in your password\"))\n",
    "nr_numbers = int(input(\"How many numbers you want in your password\"))\n",
    "nr_symbols = int(input(\"How many symbols you want in your password\"))\n",
    "\n",
    "password = \" \"\n",
    "\n",
    "\n",
    "for char in range(1,nr_letters+1):\n",
    "    password += random.choice(letters)\n",
    "    #password += random_char\n",
    "    \n",
    "    \n",
    "for char in range(1,nr_numbers+1):\n",
    "    password += random.choice(numbers)\n",
    "    #password += random_char\n",
    "    \n",
    "    \n",
    "for char in range(1,nr_symbols+1):\n",
    "    password += random.choice(symbols)\n",
    "    #password += random_char\n",
    "    \n",
    "    print(password)\n",
    "    \n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4452d130-74fc-4f98-a417-cdd4cf57656f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['j', 'P', 'j', 'S', '9', '8', '%', ')']\n",
      "['%', 'P', 'S', '8', '9', 'j', ')', 'j']\n"
     ]
    }
   ],
   "source": [
    "#hard Version\n",
    "\n",
    "password_list = []\n",
    "\n",
    "for char in range(1,nr_letters+1):\n",
    "    password_list.append(random.choice(letters))\n",
    "    \n",
    "    \n",
    "for char in range(1,nr_numbers+1):\n",
    "    password_list.append(random.choice(numbers))\n",
    "    \n",
    "    \n",
    "    \n",
    "for char in range(1,nr_symbols+1):\n",
    "    password_list.append(random.choice(symbols))\n",
    "    \n",
    "#to shuffle characters in the password    \n",
    "print(password_list)\n",
    "random.shuffle(password_list)\n",
    "print(password_list)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "468c99d2-b121-4915-8948-187728cfda86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "your password is %PS89j)j\n"
     ]
    }
   ],
   "source": [
    "password = \"\"\n",
    "for char in password_list:\n",
    "    password += char\n",
    "    \n",
    "print(f\"your password is {password}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2815b01-e2fb-4128-88b3-8685aab3f4d0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
