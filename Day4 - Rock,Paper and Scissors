{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2185aedc-1615-494a-8400-e3d54f43b8ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "random_integer = random.randint(1,10) #here, 1 and 10 both will be inclusive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "11e674ec-dbef-444f-afee-235630af42fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "print(random_integer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7d43d83a-774d-4216-bb77-6acab3b1c025",
   "metadata": {},
   "outputs": [],
   "source": [
    "random_float = random.random() #here,1.0 is not included"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5ae30034-7cc4-4a7e-8d26-9eb5fb82ca58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3791945503695293\n"
     ]
    }
   ],
   "source": [
    "print(random_float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "08dfae61-7866-4b0c-aa84-ed385743fb14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.8959727518476466"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_float * 5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c9d37c7-bc67-4d46-8eb0-b9a6b6caa765",
   "metadata": {},
   "source": [
    "You are going to write a virtual coin toss program. It will randomly tell the user \"Heads\" or \"Tails\".\n",
    "\n",
    "Important, the first letter should be capitalised and spelt exactly like in the example e.g. \"Heads\", not \"heads\".\n",
    "\n",
    "There are many ways of doing this. But to practice what we learnt in the last lesson, you should generate a random number, either 0 or 1. Then use that number to print out \"Heads\" or \"Tails\".\n",
    "\n",
    "e.g. 1 means Heads 0 means Tails"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "985fd602-4263-43dd-b687-df17f974fdf4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "It's Heads\n"
     ]
    }
   ],
   "source": [
    "random_number = random.randint(0,1) \n",
    "print(random_number)\n",
    "if random_number == 1:\n",
    "    print(\"It's Heads\")\n",
    "else:\n",
    "          print(\"It's Tails\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd3b13c6-3549-4a69-8d51-0630134b9d95",
   "metadata": {},
   "source": [
    "You are going to write a program that will select a random name from a list of names. The person selected will have to pay for everybody's food bill.\n",
    "\n",
    "Important: You are not allowed to use the choice() function.\n",
    "\n",
    "Line 1 splits the string names_string into individual names and puts them inside a List called names. For this to work, you must enter all the names as names followed by comma then space. e.g. name, name, name\n",
    "\n",
    "NOTE: Don't worry about getting hold of the input(), we've done the work behind the scenes to import everything.\n",
    "\n",
    "HINT: Assume that names looks like this: input: x, y, z, names = [\"x\", \"y\", \"z\"]\n",
    "\n",
    "Example Input\n",
    "Angela, Ben, Jenny, Michael, Chloe\n",
    "Note: notice that there is a space between the comma and the next name.\n",
    "\n",
    "Example Output\n",
    "Michael is going to buy the meal today!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "237e0590-87ab-482c-b22f-45f6661b3cee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chloe is going to buy the meal today!\n"
     ]
    }
   ],
   "source": [
    "names = [\"Angela\", \"Ben\", \"Jenny\", \"Michael\", \"Chloe\"]\n",
    "# Generate a random index within the range of the list\n",
    "random_index = random.randint(0, len(names) - 1)\n",
    "# Retrieve the name at the random index\n",
    "random_name = names[random_index]\n",
    "print(f\"{random_name} is going to buy the meal today!\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a11493d-6a36-4a35-9129-51609f1e86a7",
   "metadata": {},
   "source": [
    "This is a difficult challenge. 💪\n",
    "\n",
    "You are going to write a program that will mark a spot on a map with an X.\n",
    "\n",
    "In the starting code, you will find a variable called map.\n",
    "\n",
    "This map contains a nested list. When map is printed this is what it looks like, notice the nesting:\n",
    "\n",
    "[['⬜️', '⬜️', '⬜️'],['⬜️', '⬜️', '⬜️'],['⬜️', '⬜️', '⬜️']]\n",
    "\n",
    "This is a bit hard to work with. So on lines 6 and 23, we've used this line of code print(f\"{row1}\\n{row2}\\n{row3}\") to format the 3 lists to be printed as a 3 by 3 grid, each on a new line.\n",
    "\n",
    "['⬜️', '⬜️', '⬜️']\n",
    "\n",
    "['⬜️', '⬜️', '⬜️']\n",
    "\n",
    "['⬜️', '⬜️', '⬜️']\n",
    "Now it looks a bit more like the coordinates of a real map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "956d4983-082b-4aea-ad6e-24393c5adeaf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " b2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['⬜️', '️⬜️', '️⬜️']\n",
      "['⬜️', 'x', '️⬜️']\n",
      "['⬜️️', '⬜️️', '⬜️️']\n"
     ]
    }
   ],
   "source": [
    "line1 = [\"⬜️\",\"️⬜️\",\"️⬜️\"]\n",
    "line2 = [\"⬜️\",\"⬜️\",\"️⬜️\"]\n",
    "line3 = [\"⬜️️\",\"⬜️️\",\"⬜️️\"]\n",
    "map = [line1, line2, line3]\n",
    "position = input() \n",
    "abc = [\"a\",\"b\",\"c\"]\n",
    "letter = position[0].lower()\n",
    "letter_index = abc.index(letter)\n",
    "number_index =  b2int(position[1])- 1\n",
    "map[number_index][letter_index] = 'x'\n",
    "print(f\"{line1}\\n{line2}\\n{line3}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2a1f8999-f05c-467d-be23-03ca184be2a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "rock = '''\n",
    "    _______\n",
    "---'   ____)\n",
    "      (_____)\n",
    "      (_____)\n",
    "      (____)\n",
    "---.__(___)\n",
    "'''\n",
    "\n",
    "paper = '''\n",
    "    _______\n",
    "---'   ____)____\n",
    "          ______)\n",
    "          _______)\n",
    "         _______)\n",
    "---.__________)\n",
    "'''\n",
    "\n",
    "scissors = '''\n",
    "    _______\n",
    "---'   ____)____\n",
    "          ______)\n",
    "       __________)\n",
    "      (____)\n",
    "---.__(___)\n",
    "'''\n",
    "\n",
    "#Write your code below this line 👇\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b7108059-3914-4617-ba2d-b7e72ffba243",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "    _______\n",
      "---'   ____)\n",
      "      (_____)\n",
      "      (_____)\n",
      "      (____)\n",
      "---.__(___)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(rock)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c1ff24ad-143d-4a31-8816-fbab3225d609",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What do you choose? Type 0 for Rock, 1 for Paper or 2 for Scissors.\n",
      " 0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "    _______\n",
      "---'   ____)\n",
      "      (_____)\n",
      "      (_____)\n",
      "      (____)\n",
      "---.__(___)\n",
      "\n",
      "Computer chose:\n",
      "\n",
      "    _______\n",
      "---'   ____)____\n",
      "          ______)\n",
      "       __________)\n",
      "      (____)\n",
      "---.__(___)\n",
      "\n",
      "You win!\n"
     ]
    }
   ],
   "source": [
    "game_images = [rock, paper, scissors]\n",
    "\n",
    "user_choice = int(input(\"What do you choose? Type 0 for Rock, 1 for Paper or 2 for Scissors.\\n\"))\n",
    "print(game_images[user_choice])\n",
    "\n",
    "computer_choice = random.randint(0, 2)\n",
    "print(\"Computer chose:\")\n",
    "print(game_images[computer_choice])\n",
    "\n",
    "if user_choice >= 3 or user_choice < 0: \n",
    "      print(\"You typed an invalid number, you lose!\") \n",
    "elif user_choice == 0 and computer_choice == 2:\n",
    "      print(\"You win!\")\n",
    "elif computer_choice == 0 and user_choice == 2:\n",
    "      print(\"You lose\")\n",
    "elif computer_choice > user_choice:\n",
    "    print(\"You lose\")\n",
    "elif user_choice > computer_choice:\n",
    "      print(\"You win!\")\n",
    "elif computer_choice == user_choice:\n",
    "      print(\"It's a draw\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "012eb2dc-79d7-4ba8-bfd8-455ab0928107",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
